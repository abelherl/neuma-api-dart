{
  "name": "neuma-api-flutter",
  "displayName": "Neuma API Dart",
  "description": "Transform JSON collection to folders with request and response model",
  "version": "0.0.1",
  "engines": {
    "vscode": "^1.102.0"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [],
  "main": "./dist/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "neuma-api-flutter.generateModel",
        "title": "Neuma API: Convert JSON to Dart Model"
      }
    ]
  },
  "configuration": {
    "title": "Neuma API Dart",
    "properties": {
      "neuma-api-flutter.defaultBaseFolder": {
        "type": "string",
        "default": "lib/data/models",
        "description": "Default base folder for generated Dart models (e.g., 'lib/data/models', 'lib/models')"
      },
      "neuma-api-flutter.generateSubfolders": {
        "type": "boolean",
        "default": true,
        "description": "Create subfolders based on class names (e.g., lib/data/models/user_profile/)"
      },
      "neuma-api-flutter.nullSafety": {
        "type": "string",
        "enum": [
          "nullable",
          "non-nullable",
          "auto"
        ],
        "default": "auto",
        "description": "Null safety mode: 'nullable' (String?), 'non-nullable' (String), or 'auto' (detect from JSON)"
      },
      "neuma-api-flutter.generateJsonAnnotation": {
        "type": "boolean",
        "default": true,
        "description": "Add @JsonKey() annotations from json_annotation package"
      },
      "neuma-api-flutter.generateCopyWith": {
        "type": "boolean",
        "default": false,
        "description": "Generate copyWith() method for immutable updates"
      },
      "neuma-api-flutter.generateEquatable": {
        "type": "boolean",
        "default": false,
        "description": "Extend Equatable class for value equality (requires equatable package)"
      },
      "neuma-api-flutter.generateToString": {
        "type": "boolean",
        "default": false,
        "description": "Override toString() method"
      },
      "neuma-api-flutter.useFreezed": {
        "type": "boolean",
        "default": false,
        "description": "Generate Freezed data classes instead of regular classes (requires freezed package)"
      },
      "neuma-api-flutter.fieldCase": {
        "type": "string",
        "enum": [
          "camelCase",
          "snake_case",
          "preserve"
        ],
        "default": "camelCase",
        "description": "Field naming convention: camelCase (Dart standard), snake_case (API standard), or preserve original"
      },
      "neuma-api-flutter.addPartStatement": {
        "type": "boolean",
        "default": true,
        "description": "Add part statement for code generation (e.g., part 'user.g.dart';)"
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run package",
    "build": "esbuild src/extension.ts --bundle --outfile=dist/extension.js --platform=node --external:vscode --format=cjs",
    "compile": "npm run check-types && npm run lint && node esbuild.js",
    "watch": "npm-run-all -p watch:*",
    "watch:esbuild": "node esbuild.js --watch",
    "watch:tsc": "tsc --noEmit --watch --project tsconfig.json",
    "package": "npm run check-types && npm run lint && node esbuild.js --production",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "npm run compile-tests && npm run compile && npm run lint",
    "check-types": "tsc --noEmit",
    "lint": "eslint src",
    "test": "vscode-test"
  },
  "devDependencies": {
    "@types/vscode": "^1.102.0",
    "@types/mocha": "^10.0.10",
    "@types/node": "20.x",
    "@typescript-eslint/eslint-plugin": "^8.31.1",
    "@typescript-eslint/parser": "^8.31.1",
    "eslint": "^9.25.1",
    "esbuild": "^0.25.3",
    "npm-run-all": "^4.1.5",
    "typescript": "^5.8.3",
    "@vscode/test-cli": "^0.0.11",
    "@vscode/test-electron": "^2.5.2"
  }
}